/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package CarReserve;
import Car.CarManagement;
import edu.sit.cs.db.CSDbDelegate;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author T.Chan
 */
public class CarReserveManagement extends javax.swing.JFrame {
    
    CSDbDelegate db;
    private DefaultTableModel model;
    private ArrayList<HashMap> reserving_list;
    String[] col = {"Reserve ID", "Customer ID", "Name", "Lastname", "Car ID", "Pick-up Date", "Return Date", "Location", "Mileage", "Status"};
    int max_reserve;
    
    /**
     * Creates new form CarManagement
     */
    public CarReserveManagement() {
        setTitle("Car Reserve Management");
        setLook();
        initComponents();
        setVisible(true);
        connectDB();
        String sql = "SELECT * FROM CAR_Reserve";
        reserving_list = db.queryRows(sql);
        String max = "SELECT ReserveID FROM CAR_Reserve ORDER BY ReserveID DESC";
        HashMap temp = db.queryRow(max);
        try {
            max_reserve = Integer.parseInt((String) temp.get("ReserveID"));
        } catch(Exception e){
            max_reserve = 0;
        }
        System.out.println(db.disconnect());
        refresh();
    }
    
    public void connectDB(){
        db = new CSDbDelegate("csprog-in.sit.kmutt.ac.th", "3306", "CSC105_G6", "csc105_2014", "csc105");
        System.out.println(db.connect());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reserve_table = new javax.swing.JTable();
        refresh_button = new javax.swing.JButton();
        search_label = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        label_header = new javax.swing.JLabel();
        search_button = new javax.swing.JButton();
        status_checkbox = new javax.swing.JCheckBox();
        status_combobox = new javax.swing.JComboBox();
        add_reserve_button = new javax.swing.JButton();
        back = new javax.swing.JButton();
        update_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        reserve_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Reserve ID", "Customer ID", "Name", "Lastname", "Car ID", "Pick-up Date", "Return Date", "Location", "Mileage", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(reserve_table);
        if (reserve_table.getColumnModel().getColumnCount() > 0) {
            reserve_table.getColumnModel().getColumn(0).setResizable(false);
            reserve_table.getColumnModel().getColumn(1).setResizable(false);
            reserve_table.getColumnModel().getColumn(2).setResizable(false);
            reserve_table.getColumnModel().getColumn(3).setResizable(false);
            reserve_table.getColumnModel().getColumn(4).setResizable(false);
            reserve_table.getColumnModel().getColumn(5).setResizable(false);
            reserve_table.getColumnModel().getColumn(6).setResizable(false);
            reserve_table.getColumnModel().getColumn(7).setResizable(false);
            reserve_table.getColumnModel().getColumn(8).setResizable(false);
            reserve_table.getColumnModel().getColumn(9).setResizable(false);
        }

        refresh_button.setText("Refresh");
        refresh_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refresh_buttonActionPerformed(evt);
            }
        });

        search_label.setText("Search :");

        label_header.setText("Reservation List");

        search_button.setText("Search");
        search_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_buttonActionPerformed(evt);
            }
        });

        status_checkbox.setText("Status");
        status_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                status_checkboxActionPerformed(evt);
            }
        });

        status_combobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pending", "Reserving", "Complete", "Cancel" }));
        status_combobox.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(search_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(search_button)
                        .addGap(18, 18, 18)
                        .addComponent(status_checkbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(status_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(265, 265, 265)
                        .addComponent(refresh_button))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(22, 22, 22)
                            .addComponent(label_header))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 13, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(label_header)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(status_checkbox)
                        .addComponent(status_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(refresh_button))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(search_label)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(search_button)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add_reserve_button.setText("Add Reservation");
        add_reserve_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_reserve_buttonActionPerformed(evt);
            }
        });

        back.setText("Back to Main Menu");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        update_button.setText("Reserving Detail & Update");
        update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(back)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(update_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(add_reserve_button)
                .addGap(20, 20, 20))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add_reserve_button)
                    .addComponent(back)
                    .addComponent(update_button))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void refresh_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refresh_buttonActionPerformed
        refresh();
    }//GEN-LAST:event_refresh_buttonActionPerformed
    
    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        dispose();
    }//GEN-LAST:event_backActionPerformed
    
    private void add_reserve_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_reserve_buttonActionPerformed
        CarReserveAdd add = new CarReserveAdd();
        add.addWindowListener(new WindowAdapter(){
            public void windowClosing(){
                refresh();
            }
        });
    }//GEN-LAST:event_add_reserve_buttonActionPerformed
    
    private void update_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_buttonActionPerformed
        JTextField id = new JTextField();
        JComponent[] input = new JComponent[]{
            new JLabel("Enter Reserve ID", SwingConstants.CENTER),
            id
        };
        
        int n = JOptionPane.showConfirmDialog(null, input, "Update Reservation", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);
        
        final String id_txt = id.getText();
        connectDB();
        String max = "SELECT ReserveID FROM CAR_Reserve ORDER BY ReserveID DESC";
        HashMap temp = db.queryRow(max);
        try {
            max_reserve = Integer.parseInt((String) temp.get("ReserveID"));
        } catch(Exception e){
            max_reserve = 0;
        }
        System.out.println(db.disconnect());
        if(n==JOptionPane.OK_OPTION){
            String id_ = id.getText();
            try {
                Integer.parseInt(id_);
            } catch(Exception e) {
                id_ = ""+(max_reserve+1);
            }
            if( Integer.parseInt(id_) > 0 && Integer.parseInt(id_) <= max_reserve ){
                CarReserveDetail detail = new CarReserveDetail(Integer.parseInt(id_));
                detail.addWindowListener(new WindowAdapter(){
                    public void windowClosed(WindowEvent e){
                        connectDB();
                        String sql = "SELECT * FROM CAR_Reserve WHERE ReserveID="+id_txt;
                        HashMap reserve = db.queryRow(sql);
                        try {
                            if(((String)reserve.get("Status")).equals("Complete")){
                                String sql_update = "UPDATE CAR_Car SET Status = 'Available' WHERE ID = '"+(String)reserve.get("CarID")+"'";
                                System.out.println(db.executeQuery(sql_update));
                            }
                        } catch(Exception ex){
                            
                        }
                        System.out.println(db.disconnect());
                        refresh();
                    }
                });
            } else {
                JOptionPane.showMessageDialog(null, new JComponent[]{new JLabel("Invalid Value or No Reserving ID.", SwingConstants.CENTER)},"Error Alert!" , JOptionPane.PLAIN_MESSAGE);
            }
        }
    }//GEN-LAST:event_update_buttonActionPerformed
    
    private void status_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_status_checkboxActionPerformed
        if(status_checkbox.isSelected()){
            status_combobox.setEnabled(true);
        } else {
            status_combobox.setEnabled(false);
        }
    }//GEN-LAST:event_status_checkboxActionPerformed
    
    private void search_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_buttonActionPerformed
        ArrayList<HashMap> search_item;
        ArrayList<HashMap> search_reserve = new ArrayList<HashMap>();
        connectDB();
        if(status_checkbox.isSelected()){
            // ReserveID, CustomerID, CarID, PickUp_Date, Return_Date, Location, Mileage, Status
            if(!search.getText().equals("")){
                String search_sql = "SELECT * FROM CAR_Reserve WHERE Status = '"+ status_combobox.getSelectedItem()+"'";
                
                search_item = db.queryRows(search_sql);
                for(HashMap item : search_item){
                    String search_sql2 = "SELECT Name,Lastname FROM CAR_Customer WHERE ID='"+(String)item.get("CustomerID")+"'";
                    HashMap search_name = db.queryRow(search_sql2);
                    String customer_name = (String) search_name.get("Name");
                    String customer_lname = (String) search_name.get("Lastname");
                    if( search.getText().equals((String) item.get("ReserveID")) ||
                            search.getText().equals((String) item.get("CustomerID")) ||
                            search.getText().equals((String) item.get("CarID")) ||
                            search.getText().equals((String) item.get("Location")) ||
                            search.getText().equals( customer_name ) ||
                            search.getText().equals( customer_lname ) ){
                        search_reserve.add(item);
                    }
                }
            } else {
                String search_sql = "SELECT * FROM CAR_Reserve WHERE Status = '"+status_combobox.getSelectedItem()+"'";
                search_item = db.queryRows(search_sql);
                for(HashMap item : search_item){
                    search_reserve.add(item);
                }
            }
            showContent(search_reserve);
            
        } else {
            if(!search.getText().equals("")){
                String search_sql = "SELECT * FROM CAR_Reserve";
                search_item = db.queryRows(search_sql);
                for(HashMap item : search_item){
                    String search_sql2 = "SELECT Name,Lastname FROM CAR_Customer WHERE ID='"+(String)item.get("CustomerID")+"'";
                    HashMap search_name = db.queryRow(search_sql2);
                    String customer_name = (String) search_name.get("Name");
                    String customer_lname = (String) search_name.get("Lastname");
                    if( search.getText().equals((String) item.get("ReserveID")) ||
                            search.getText().equals((String) item.get("CustomerID")) ||
                            search.getText().equals((String) item.get("CarID")) ||
                            search.getText().equals((String) item.get("Location")) ||
                            search.getText().equals( customer_name ) ||
                            search.getText().equals( customer_lname ) ){
                        search_reserve.add(item);
                    }
                }
                showContent(search_reserve);
            } else {
                refresh();
            }
        }
        System.out.println(db.disconnect());
    }//GEN-LAST:event_search_buttonActionPerformed
    
    public void refresh(){
        connectDB();
        String sql = "SELECT * FROM CAR_Reserve";
        reserving_list = db.queryRows(sql);
        showContent(reserving_list);
        System.out.println(db.disconnect());
    }
    
    public void showContent(ArrayList<HashMap> reserving){
        connectDB();
        model = new DefaultTableModel(col,0);
        for(HashMap res : reserving){
            String reserve_id = (String) res.get("ReserveID");
            
            String cread = "SELECT Name,Lastname FROM CAR_Customer WHERE ID='"+(String)res.get("CustomerID")+"'";
            HashMap customers = db.queryRow(cread);
            String customer_id = (String) res.get("CustomerID");
            String customer_name = (String) customers.get("Name");
            String customer_lastname = (String) customers.get("Lastname");
            
            String car_id = (String) res.get("CarID");
            String pickup = (String) res.get("PickUp_Date");
            String carback = (String) res.get("Return_Date");
            String locate = (String) res.get("Location");
            String mile = (String) res.get("Mileage");
            String status = (String) res.get("Status");
            Object[] data = {reserve_id, customer_id, customer_name, customer_lastname, car_id, pickup, carback, locate, mile, status};
            model.addRow(data);
        }
        reserve_table.setModel(model);
        System.out.println(db.disconnect());
    }
    
    
    /**
     * @param args the command line arguments
     */
    public void setLook() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CarManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CarManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CarManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CarManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form *//*
        java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
        new CarManagement().setVisible(true);
        }
        });*/
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_reserve_button;
    private javax.swing.JButton back;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label_header;
    private javax.swing.JButton refresh_button;
    private javax.swing.JTable reserve_table;
    private javax.swing.JTextField search;
    private javax.swing.JButton search_button;
    private javax.swing.JLabel search_label;
    private javax.swing.JCheckBox status_checkbox;
    private javax.swing.JComboBox status_combobox;
    private javax.swing.JButton update_button;
    // End of variables declaration//GEN-END:variables
}
