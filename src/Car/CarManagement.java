/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Car;
import edu.sit.cs.db.CSDbDelegate;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author T.Chan
 */
public class CarManagement extends javax.swing.JFrame {

    CSDbDelegate db;
    private DefaultTableModel model;
    private ArrayList<HashMap> car_list;
    String[] col = {"Car ID", "Brands", "Series", "Year" , "Color", "License Page", "Price/Day", "Seat", "Mileage", "Status"};
    /**
     * Creates new form CarManagement
     */
    public CarManagement() {
        setTitle("Car Management");
        setLook();
        initComponents();
        setVisible(true);
        refresh();
    }
    
    public void connectDB(){
        db = new CSDbDelegate("csprog-in.sit.kmutt.ac.th", "3306", "CSC105_G6", "csc105_2014", "csc105");
        System.out.println(db.connect());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        carlist_table = new javax.swing.JTable();
        refresh = new javax.swing.JButton();
        search_label = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        label_header = new javax.swing.JLabel();
        search_button = new javax.swing.JButton();
        available_radio = new javax.swing.JRadioButton();
        reserved_radio = new javax.swing.JRadioButton();
        add_car = new javax.swing.JButton();
        back = new javax.swing.JButton();
        car_detail_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        carlist_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Car ID", "Brand", "Series", "Year", "Color", "License Page", "Price/Day", "Seat", "Mileage", "Available"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(carlist_table);
        if (carlist_table.getColumnModel().getColumnCount() > 0) {
            carlist_table.getColumnModel().getColumn(0).setResizable(false);
            carlist_table.getColumnModel().getColumn(1).setResizable(false);
            carlist_table.getColumnModel().getColumn(2).setResizable(false);
            carlist_table.getColumnModel().getColumn(3).setResizable(false);
            carlist_table.getColumnModel().getColumn(4).setResizable(false);
            carlist_table.getColumnModel().getColumn(5).setResizable(false);
            carlist_table.getColumnModel().getColumn(6).setResizable(false);
            carlist_table.getColumnModel().getColumn(7).setResizable(false);
            carlist_table.getColumnModel().getColumn(8).setResizable(false);
            carlist_table.getColumnModel().getColumn(9).setResizable(false);
        }

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        search_label.setText("Search :");

        label_header.setText("Car List");

        search_button.setText("Search");
        search_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_buttonActionPerformed(evt);
            }
        });

        available_radio.setText("Available Only");
        available_radio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                available_radioActionPerformed(evt);
            }
        });

        reserved_radio.setText("Reserved Only");
        reserved_radio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserved_radioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label_header)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(search_label)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(search_button)
                            .addGap(18, 18, 18)
                            .addComponent(available_radio)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(reserved_radio)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(refresh))))
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(label_header)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refresh)
                    .addComponent(search_label)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search_button)
                    .addComponent(available_radio)
                    .addComponent(reserved_radio))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add_car.setText("Add Car");
        add_car.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_carActionPerformed(evt);
            }
        });

        back.setText("Back to Main Menu");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        car_detail_button.setText("Car Detail & Update");
        car_detail_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                car_detail_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(back)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(car_detail_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(add_car)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(back)
                    .addComponent(add_car)
                    .addComponent(car_detail_button))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        refresh();
    }//GEN-LAST:event_refreshActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        dispose();
    }//GEN-LAST:event_backActionPerformed

    private void search_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_buttonActionPerformed
        ArrayList<HashMap> search_item;
        ArrayList<HashMap> search_car = new ArrayList<HashMap>();
        connectDB();
        String property = "";
        
        // check the radio is selected
        if(available_radio.isSelected()){
            property = "Available";
        } else if(reserved_radio.isSelected()){
            property = "Reserved";
        }
        
        // create a sql string
        String search_sql = "SELECT * FROM CAR_Car";
        // if have an input
        if(!search.getText().equals("")){
            if(!property.equals("")){
                search_sql += " WHERE Status = '" + property + "'";
            }
        } else { // if not have an input
            refresh();
            return ;
        }
        
        search_item = db.queryRows(search_sql);
        for(HashMap item : search_item){
            if( search.getText().equals((String) item.get("ID")) ||
                    search.getText().equals((String) item.get("brand")) ||
                    search.getText().equals((String) item.get("series")) ||
                    search.getText().equals((String) item.get("year")) ||
                    search.getText().equals((String) item.get("color")) ||
                    search.getText().equals((String) item.get("price_day")) ||
                    search.getText().equals((String) item.get("seat")) ||
                    search.getText().equals((String) item.get("mileage")) ||
                    search.getText().equals((String) item.get("LicensePage")) ){
                search_car.add(item);
            }
        }
        
        showContent(search_car);
        
        System.out.println(db.disconnect());
    }//GEN-LAST:event_search_buttonActionPerformed

    private void car_detail_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_car_detail_buttonActionPerformed
        JTextField id = new JTextField();
        // create jcomponent for confirm dialog
        JComponent[] enter_car = new JComponent[]{
            new JLabel("Enter Car ID", SwingConstants.CENTER),
            id
        };
        int result = JOptionPane.showConfirmDialog(null, enter_car, "Car Detail", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        
        // find the car
        connectDB();
        String carID = id.getText();
        String sql = "SELECT ID FROM CAR_Car WHERE ID = '"+ carID +"'";
        ArrayList<HashMap> cars = db.queryRows(sql);
        // if press OK
        if(result == JOptionPane.OK_OPTION){
            // if have a car, show car detail
            if(cars.size()>0){
                new CarDetail(carID);
            } else { // else show error message
                JOptionPane.showMessageDialog(null, "Cannot found car.", "Error", JOptionPane.PLAIN_MESSAGE);
            }
        }
        
        System.out.println(db.disconnect()); 
    }//GEN-LAST:event_car_detail_buttonActionPerformed

    private void add_carActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_carActionPerformed
        // create AddCar panel to show in confirm dialog
        CarAdd add_car_window = new CarAdd();
        int n = JOptionPane.showConfirmDialog(null, add_car_window, "Add New Car", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        
        // if press OK, add the car
        if( n == JOptionPane.OK_OPTION ){
            connectDB();
            // check not have empty fields
            if(!(add_car_window.getID().equals("") ||
                add_car_window.getBrand().equals("") ||
                add_car_window.getSeries().equals("") ||
                add_car_window.getYear().equals("") ||
                add_car_window.getColor().equals("") ||
                add_car_window.getPrice().equals("") ||
                add_car_window.getSeat().equals("") ||
                add_car_window.getLicense().equals("")) ){
                
                // create sql query string
                String sql = "INSERT INTO CAR_Car VALUES ("
                        + "'"+ add_car_window.getID() + "',"
                        + "'"+ add_car_window.getBrand() + "',"
                        + "'"+ add_car_window.getSeries() + "',"
                        + "'"+ add_car_window.getYear() + "',"
                        + "'"+ add_car_window.getColor() + "',"
                        + Integer.parseInt(add_car_window.getPrice()) + ","
                        + Integer.parseInt(add_car_window.getSeat()) + ","
                        + "0,"
                        + "'"+ add_car_window.getLicense() + "',"
                        + "'Available')";
                // execute query
                boolean updateSuccess = db.executeQuery(sql);
                System.out.println(updateSuccess);
                System.out.println(db.disconnect());
                
            }
            else {
                JOptionPane.showMessageDialog(null, "Invalid or missed input. Cannot add a car.");
            }
        }
    }//GEN-LAST:event_add_carActionPerformed

    private void available_radioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_available_radioActionPerformed
        if(reserved_radio.isSelected()){
            reserved_radio.setSelected(false);
        }
    }//GEN-LAST:event_available_radioActionPerformed

    private void reserved_radioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserved_radioActionPerformed
        if(available_radio.isSelected()){
            available_radio.setSelected(false);
        }
    }//GEN-LAST:event_reserved_radioActionPerformed

    public void refresh(){
        connectDB();
        String sql = "SELECT * FROM CAR_Car";
        car_list = db.queryRows(sql);
        showContent(car_list);
        System.out.println(db.disconnect());
    }
    
    public void showContent(ArrayList<HashMap> cars){
        model = new DefaultTableModel(col,0);
        for(HashMap car : cars){
            String car_id = (String) car.get("ID");
            String brand = (String) car.get("brand");
            String series = (String) car.get("series");
            String year = (String) car.get("year");
            String color = (String) car.get("color");;
            String license_page = (String) car.get("LicensePage");;
            String price = (String) car.get("price_day");;
            String seat = (String) car.get("seat");;
            String mile = (String) car.get("mileage");
            String status = (String) car.get("Status");
            Object[] data = {car_id, brand, series, year, color, license_page, price, seat, mile, status};
            model.addRow(data);
        }
        carlist_table.setModel(model);
    }
    
    /**
     * @param args the command line arguments
     */
    public void setLook() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CarManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CarManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CarManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CarManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form *//*
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CarManagement().setVisible(true);
            }
        });*/
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_car;
    private javax.swing.JRadioButton available_radio;
    private javax.swing.JButton back;
    private javax.swing.JButton car_detail_button;
    private javax.swing.JTable carlist_table;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label_header;
    private javax.swing.JButton refresh;
    private javax.swing.JRadioButton reserved_radio;
    private javax.swing.JTextField search;
    private javax.swing.JButton search_button;
    private javax.swing.JLabel search_label;
    // End of variables declaration//GEN-END:variables
}
